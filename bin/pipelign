#!/usr/bin/env python3

'''
    Pipelign.py

    A python based program to align virus sequences.

    The program takes as input a single FASTA formatted file

    Returns a FASTA formatted alignment file
  
    Different flavours are present:
        - GNU Parallel for Linux and MacOS
        - Joblib for Linux, MacOS and Windows
'''

#*********************************************************************

import sys, os, shutil, subprocess, argparse, textwrap, stat
from pipelign import *

if __name__=="__main__":
  
    # get all the command line arguments
    args = getArguments()

    cDir = os.getcwd() # save path for the current working directory
    
    mArgs = MyStruct(
        inFile = args.inFile,
        outFile = os.path.join(cDir, args.outFile),
        lenThr = args.lenThr,
        #gCode = args.code,
        alphabet = args.alphabet,
        keepOrphans = args.keepOrphans,
        keepBadSeqs = args.keepBadSeqs,
        makeZip = args.mZip,
        simPer = args.simPer,
        run = args.run.upper(),
        thread = args.thread,
        mIterL = args.mIterateLong,
        mIterM = args.mIterateMerge,
        fragEmpty = 1,
        longName = 'long.fas',
        fragName = 'frag.fas',
        tempDirPath = args.tempDirPath,
        ambigPer = args.ambigPer,
        merge = args.merge.upper(),
        #longSeqsOnly = args.longSeqsOnly,
        stage = args.stage,
        excludeClusters = args.excludeClusters)

    
    # check whether input file exists
    if not checkPresenceOfFile(mArgs.inFile):
        msg = '\n==============================='
        msg += '\nInput file <%s> does not exist in the given path' % mArgs.inFile
        msg += '\nPlease try again with the correct file name and path'
        msg += '\n==============================='
        msg += '\n\nPipelign is exiting.\n'
        sys.exit(msg)

    # Pipeline process starts here
    tFileName = 'input.fas'  # input file in temporary directory
    deFileName = 'input.dealign.fas' # dealigned input file

  
    # get current time and generate name for the zipped temporary directory
    timeNow = time.strftime('%Y-%m-%d-%H%M%S')
    zName = 'pipelign.' + timeNow 

    # create temporary directory 
    tempDir, tDirName = makeTempDir(mArgs.tempDirPath)

    # copy input file inside the temporary directory
    dName = os.path.join(tDirName, tFileName)
    copyFile(mArgs.inFile,dName)
  
    msg = '\n[' + time.strftime('%d %b %H:%M:%S') + ']'
    msg += ' Pipelign started with sequence file <%s>\n' % mArgs.inFile 
    print(msg)
  
  
    # change current working directory to the temp
    os.chdir(tDirName)
  
    # removes any possible gaps from the sequence file
    deAlign(tFileName, deFileName) 

    # make separate sequence file for long sequences and fragments
    mArgs.fragEmpty, numFrag = separateFullFragment(deFileName, mArgs.lenThr, mArgs.longName, mArgs.fragName)

    # separate the long sequences containing ambiguous characters more than a given proportion
    separateLongAmbigs(mArgs.alphabet,mArgs.ambigPer,cDir,tFileName,zName)
    mArgs.longName = 'long.good.fas'

    # use CD-HIT to group sequences based on similarity
    runCDHIT(mArgs.longName, mArgs.alphabet, mArgs.simPer, mArgs.thread,cDir,tFileName,zName)  

    # create separate files for each cluster
    numClusters = makeClusters(mArgs.longName,'grp.clstr')

    # add cluster numbers and size to header
    addClusterNumberToReps('grp','long.ClusterList.txt','clsReps.fas')

    if numClusters < 3: # less than 3 clusters, tree will not be built
        msg = '\n[' + time.strftime('%d %b %H:%M:%S') + ']'
        msg += ' Only %d cluster(s) created. Phylogenetic tree cannot be built\n' % numClusters
        print(msg)

    else: # at least 3 clusters
        # ********************************************************
        # align cluster reps; reconstruct phylogeny; draw midpoint rooted tree
        msg = '\n[' + time.strftime('%d %b %H:%M:%S') + ']'
        msg += ' Aligning cluster representative sequences\n'
        print(msg)

        if numClusters <= 100:
            linsi('clsReps.fas','clsReps.aln',mArgs.thread,mArgs.mIterL,'pipelign.log',cDir,tFileName,zName)
        else:
            fftnsi('clsReps.fas','clsReps.aln',mArgs.thread,mArgs.mIterL,'pipelign.log',cDir,tFileName,zName)
    
        msg = '[' + time.strftime('%d %b %H:%M:%S') + ']'
        msg += ' Alignment of cluster representatives written in <clsReps.aln>\n' 
        print(msg)
    
        # generate phylogenetic tree using IQ-TREE  
        makeIQTree('clsReps.aln',mArgs.thread,cDir,tFileName,zName,mArgs.alphabet)

        msg = '[' + time.strftime('%d %b %H:%M:%S') + ']'
        msg += ' Phylogenetic tree of the cluster representatives written in <clsReps.aln.treefile>\n' 
        print(msg)
    
        # make midpoint root tree for cluster representatives
        makeMidPointRootTree('clsReps.aln.treefile')
    
        msg = '[' + time.strftime('%d %b %H:%M:%S') + ']'
        msg += ' Midpoint rooted tree written in <clsReps.aln.midpoint.treefile>\n' 
        print(msg)
    
        # draw midpoint root tree
        print('\nMidpoint rooted tree for cluster representatives is drawn below. Tips are labelled as <H_N_C>.')
        print('\tH: header of the cluster representative sequence')
        print('\tN: number of long sequences in that cluster')
        print('\tC: unique identifier of the cluster')
        drawAsciiTree('clsReps.aln.midpoint.treefile')
        print('\n')
        # ********************************************************
        
    # make individual long cluster alignments
    msg = '[' + time.strftime('%d %b %H:%M:%S') + ']'
    msg += ' Aligning long sequence clusters\n' 
    print(msg)
    
    # align long sequence clusters and create <long.xx.aln> files
    if mArgs.run == 'G': # run GNU parallel version
        alnLongSequenceClustersGNUParallel(numClusters,mArgs.thread,mArgs.mIterL,cDir,tFileName,zName) 
        
    elif mArgs.run == 'J':
        alnLongSequenceClustersJoblibParallel(numClusters,mArgs.thread,mArgs.mIterL,cDir,tFileName,zName)  
        
    
    # make HMMs and database from long sequence cluster alignments
    makeHMMdbParallel(numClusters,mArgs.thread,mArgs.alphabet,'hmmer.log',cDir,tFileName,zName)

    #***************
    # only create long sequence cluster alignments and HMMs and exit
    if mArgs.stage == 1:
        longSeqClusters(mArgs.tempDirPath,cDir,zName,tDirName,tFileName)

        # No path provided for temporary directory
        if mArgs.tempDirPath is None:
            try:
                wName = cDir + '/' + zName 
                shutil.copytree(tDirName,wName) 
                os.chdir(cDir)
                os.chmod(zName,0o777)
            except OSError as e:
                print(e)
                cZip(cDir,tFileName,zName)

        if mArgs.tempDirPath:
            os.chdir(cDir)
            if os.path.exists(zName):
                os.chmod(zName,0o777)    

        msg = '\nAlignment files and HMMs can be found in <%s>\n' % zName
        msg += '\tLong sequence alignments have names <long.xx.aln>\n'
        msg += '\tHMM file written in <long.xx.hmm>\n'
        msg += '\tHMM database written in <pipelign.hmm>\n'
        msg += '\nThank you for using Pipelign\n'
        sys.exit(msg)

    
    #***************
    # create alignment from only long sequences
    if mArgs.stage == 2:
        if mArgs.merge == 'P':
            longSeqAlignmentParallel(numClusters,mArgs,cDir,tFileName,zName)
        elif mArgs.merge == 'C':
            longSeqAlignmentConsensus(numClusters,mArgs,cDir,tFileName,zName)
        
        # remove clusters
        if mArgs.excludeClusters:
            excludeClustersFromalignment('final.all.aln','final.aln')
        else:
            copyFile('final.all.aln','final.aln')
            
        if checkPresenceOfFile('final.aln'):
            copyFile('final.aln',mArgs.outFile)
    
    
        if checkPresenceOfFile(mArgs.outFile):
            msg = '\n[' + time.strftime('%d %b %H:%M:%S') + ']'
            msg += ' Final alignment written in <%s>\n' % mArgs.outFile
            print(msg)
        else:
            msg = '\n[' + time.strftime('%d %b %H:%M:%S') + ']'
            msg += ' Pipelign could not write the file <%s>\n' % mArgs.outFile
            msg += '\tSomething went wrong. Please check the zipped output directory.\n' 
            print(msg)
        
        # give permission to output alignment to user; used mainly for Docker
        if checkPresenceOfFile(mArgs.outFile):
            os.chmod(mArgs.outFile, 0o777)
            
        if mArgs.tempDirPath:
            os.chdir(cDir)
            if os.path.exists(zName):
                os.chmod(zName,0o777)    
        
        sys.exit('\nThank you for using Pipelign.\n')

    #***************
    # Assigns clusters to fragments based on BLAST and HMM search
    if mArgs.stage == 3:
        assignClusterstoFrags(numClusters,numFrag,mArgs,tDirName,cDir,tFileName,zName)
        
        # No path provided for temporary directory
        if mArgs.tempDirPath is None:
            try:
                wName = cDir + '/' + zName 
                shutil.copytree(tDirName,wName) 
                os.chdir(cDir)
                os.chmod(zName,0o777)
            except OSError as e:
                print(e)
                cZip(cDir,tFileName,zName)
        
        if mArgs.tempDirPath:
            os.chdir(cDir)
            if os.path.exists(zName):
                os.chmod(zName,0o777)    

        msg = '\nAlignment files and HMMs can be found in <%s>\n' % zName
        msg += '\tLong sequence alignments have names <long.xx.aln>\n'
        msg += '\tHMM file written in <long.xx.hmm>\n'
        msg += '\tHMM database written in <pipelign.hmm>\n'
        if checkPresenceOfFile('frag.fas'):
            msg += '\tCluster files for fragments are written in <frag.xx.fas>\n'
        if checkPresenceOfFile('frag.noClusters.fas'):
            msg += '\tUnassigned fragments are written in <frag.noClusters.fas>\n'
        msg += '\nThank you for using Pipelign\n'
        sys.exit(msg)
        
          
    #***************
    # make cluster alignments with fragments
    if mArgs.stage == 4:
        assignClusterstoFrags(numClusters,numFrag,mArgs,tDirName,cDir,tFileName,zName)
        
        if mArgs.run == 'G':
            addFragmentToClustersGNUParallel(numClusters,'fragAlign.log',mArgs,cDir,tFileName,zName)
        elif mArgs.run == 'J':
            addFragmentToClustersJoblibParallel(numClusters,'fragAlign.log',mArgs.thread,mArgs.mIterL,cDir,tFileName,zName)

        # No path provided for temporary directory
        if mArgs.tempDirPath is None:
            try:
                wName = cDir + '/' + zName 
                shutil.copytree(tDirName,wName) 
                os.chdir(cDir)
                os.chmod(zName,0o777)
            except OSError as e:
                print(e)
                cZip(cDir,tFileName,zName)

        if mArgs.tempDirPath:
            os.chdir(cDir)
            if os.path.exists(zName):
                os.chmod(zName,0o777)    

        msg = '\nAlignment files and HMMs can be found in <%s>\n' % zName
        msg += '\tLong sequence alignments have names <long.xx.aln>\n'
        msg += '\tHMM file written in <long.xx.hmm>\n'
        msg += '\tHMM database written in <pipelign.hmm>\n'
        if checkPresenceOfFile('frag.fas'):
            msg += '\tCluster files for fragments are written in <frag.xx.fas>\n'
        if checkPresenceOfFile('frag.noClusters.fas'):    
            msg += '\tUnassigned fragments are written in <frag.noClusters.fas>\n'
        msg += '\tCluster alignments are written in <cls.xx.aln>\n'        
        msg += '\nThank you for using Pipelign\n'
        sys.exit(msg)
        
        
    #************
    # complete alignment requested, -n 5
    if mArgs.stage == 5:
        assignClusterstoFrags(numClusters,numFrag,mArgs,tDirName,cDir,tFileName,zName)
        
        if mArgs.run == 'G':
            addFragmentToClustersGNUParallel(numClusters,'fragAlign.log',mArgs,cDir,tFileName,zName)
        elif mArgs.run == 'J':
            addFragmentToClustersJoblibParallel(numClusters,'fragAlign.log',mArgs.thread,mArgs.mIterL,cDir,tFileName,zName)

        if numClusters == 1:
            copyFile('cls.0.aln','final.noOrphans.aln')
        #elif numClusters > 1:
            #mergeConsensus(numClusters,'final.noOrphans.aln','all',mArgs,'consensus.log',cDir,tFileName,zName)
        
        # only two clusters, merge the pair
        elif numClusters == 2:
            if mArgs.merge == 'P':
                mergePair('cls.0.aln','cls.1.aln','final.noOrphans.aln',mArgs.thread,mArgs.mIterM,'merge.log',cDir,tFileName,zName)
            elif mArgs.merge == 'C':
                mergeConsensus(numClusters,'final.noOrphans.aln','all',mArgs,'consensus.log',cDir,tFileName,zName)
    
        # more than 2 clusters
        elif numClusters >= 3:
            if mArgs.merge == 'P':
                resName = merge_gnu_parallel('clsReps.aln.midpoint.treefile','all',mArgs.thread,mArgs.mIterL,'merge.log',cDir,tFileName,zName)
                copyFile(resName,'final.noOrphans.aln')
            elif mArgs.merge == 'C':
                mergeConsensus(numClusters,'final.noOrphans.aln','all',mArgs,'consensus.log',cDir,tFileName,zName)
        #'''
            
        # add unclustered fragments
        if mArgs.keepOrphans and checkPresenceOfFile('frag.noClusters.fas'):
                # create alignment by merging cluster alignments
                msg = '\n[' + time.strftime('%d %b %H:%M:%S') + ']'
                msg += ' Adding orphan fragments to final alignment\n' 
                print(msg)

                addFragments('frag.noClusters.fas','final.noOrphans.aln','final.noBadSeq.aln',mArgs.thread,mArgs.mIterL,'merge.log',cDir,tFileName,zName)
        else:
            copyFile('final.noOrphans.aln','final.noBadSeq.aln')
 
        msg = '\n[' + time.strftime('%d %b %H:%M:%S') + ']'
        msg += ' <final.noBadSeq.aln> file created\n' 
        print(msg)

        # check if <long.bad.fas> needs to be added to the final alignment
        if mArgs.keepBadSeqs and checkPresenceOfFile('long.bad.fas'):
            addLongSeqs('long.bad.fas','final.noBadSeq.aln','final.all.aln',mArgs.thread,mArgs.mIterL,'addBadSeq.log',cDir,tFileName,zName) 
        else:
            copyFile('final.noBadSeq.aln','final.all.aln')
        
        # if user wants to exclude clusters from the final alignment
        # first show the cluster representative tree
        # then asks for list of clusters separated by space
        # remove all the sequences from the <final.all.aln> that belong to the clusters
        if mArgs.excludeClusters:
            excludeClustersFromalignment('final.all.aln','final.aln')
        else:
            copyFile('final.all.aln','final.aln')    

        if checkPresenceOfFile('final.aln'):
            copyFile('final.aln',mArgs.outFile)
        
        if checkPresenceOfFile(mArgs.outFile):
            msg = '\n[' + time.strftime('%d %b %H:%M:%S') + ']'
            msg += ' Final alignment written in <%s>\n' % mArgs.outFile
            print(msg)
            
            # give permission to output file; for docker
            os.chmod(mArgs.outFile,0o777)
            
            # change to parent directory
            os.chdir(cDir)
            
            # give permission to temporary directory
            if mArgs.tempDirPath:
                if os.path.exists(zName):
                    os.chmod(zName,0o777)
                 
        else:
            msg = '\n[' + time.strftime('%d %b %H:%M:%S') + ']'
            msg += ' Pipelign could not write the file <%s>\n' % mArgs.outFile
            msg += '\tSomething went wrong. Please check the output directory.\n' 
            print(msg)
            cZip(cDir,tFileName,zName)
        
    
        sys.exit('\nThank you for using Pipelign.\n')

